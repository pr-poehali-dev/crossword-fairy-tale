import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card } from '@/components/ui/card';
import { useToast } from '@/hooks/use-toast';
import Icon from '@/components/ui/icon';

interface CrosswordCell {
  row: number;
  col: number;
  letter: string;
  number?: number;
  clueId?: number;
}

interface Clue {
  id: number;
  direction: 'across' | 'down';
  number: number;
  question: string;
  answer: string;
  startRow: number;
  startCol: number;
}

const clues: Clue[] = [
  { id: 1, direction: 'across', number: 1, question: '–ö—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ü–∞—Ä–µ–≤–Ω—É –≤ –ª–µ—Å?', answer: '–ß–ï–†–ù–ê–í–ö–ê', startRow: 0, startCol: 0 },
  { id: 2, direction: 'down', number: 2, question: '–°–∫–æ–ª—å–∫–æ –±–æ–≥–∞—Ç—ã—Ä–µ–π –Ω–∞—à–ª–∏ —Ü–∞—Ä–µ–≤–Ω—É?', answer: '–°–ï–ú–¨', startRow: 0, startCol: 4 },
  { id: 3, direction: 'across', number: 3, question: '–ö—Ç–æ –±—ã–ª –∂–µ–Ω–∏—Ö–æ–º —Ü–∞—Ä–µ–≤–Ω—ã?', answer: '–ï–õ–ò–°–ï–ô', startRow: 2, startCol: 1 },
  { id: 4, direction: 'down', number: 4, question: '–ß—Ç–æ –¥–∞–ª–∞ —Ü–∞—Ä–∏—Ü–µ –º–∞—á–µ—Ö–∞ –≤ –ø–æ–¥–∞—Ä–æ–∫?', answer: '–Ø–ë–õ–û–ö–û', startRow: 2, startCol: 1 },
  { id: 5, direction: 'across', number: 5, question: '–ö—Ç–æ –ø–æ–º–æ–≥ –ï–ª–∏—Å–µ—é –Ω–∞–π—Ç–∏ —Ü–∞—Ä–µ–≤–Ω—É?', answer: '–í–ï–¢–ï–†', startRow: 4, startCol: 2 },
  { id: 6, direction: 'across', number: 6, question: '–° –∫–µ–º —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–ª–∞ –∑–ª–∞—è —Ü–∞—Ä–∏—Ü–∞?', answer: '–ó–ï–†–ö–ê–õ–û', startRow: 6, startCol: 0 },
  { id: 7, direction: 'down', number: 7, question: '–ö—Ç–æ –æ—Ö—Ä–∞–Ω—è–ª –¥–æ–º –±–æ–≥–∞—Ç—ã—Ä–µ–π?', answer: '–ü–ï–°', startRow: 4, startCol: 6 },
  { id: 8, direction: 'across', number: 8, question: '–í —á–µ–º –ª–µ–∂–∞–ª–∞ –º–µ—Ä—Ç–≤–∞—è —Ü–∞—Ä–µ–≤–Ω–∞?', answer: '–ì–†–û–ë', startRow: 8, startCol: 3 },
];

const Index = () => {
  const [userAnswers, setUserAnswers] = useState<{ [key: number]: string }>({});
  const [completedClues, setCompletedClues] = useState<Set<number>>(new Set());
  const [showCongrats, setShowCongrats] = useState(false);
  const { toast } = useToast();

  const checkAnswer = (clueId: number) => {
    const clue = clues.find(c => c.id === clueId);
    if (!clue) return;

    const userAnswer = (userAnswers[clueId] || '').toUpperCase().trim();
    if (userAnswer === clue.answer) {
      setCompletedClues(new Set([...completedClues, clueId]));
      toast({
        title: 'üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!',
        description: '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!',
      });
    } else {
      toast({
        title: '‚ùå –ù–µ–≤–µ—Ä–Ω–æ',
        description: '–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!',
        variant: 'destructive',
      });
    }
  };

  useEffect(() => {
    if (completedClues.size === clues.length) {
      setShowCongrats(true);
    }
  }, [completedClues]);

  const handleInputChange = (clueId: number, value: string) => {
    setUserAnswers({
      ...userAnswers,
      [clueId]: value,
    });
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-100 via-pink-50 to-orange-50 py-8 px-4 relative overflow-hidden">
      <div className="absolute top-10 left-10 text-6xl animate-float">‚ú®</div>
      <div className="absolute top-20 right-20 text-5xl animate-float" style={{ animationDelay: '0.5s' }}>‚≠ê</div>
      <div className="absolute bottom-20 left-1/4 text-4xl animate-float" style={{ animationDelay: '1s' }}>üåô</div>
      <div className="absolute bottom-40 right-1/3 text-5xl animate-float" style={{ animationDelay: '1.5s' }}>üëë</div>

      <div className="max-w-6xl mx-auto relative z-10">
        <div className="text-center mb-8">
          <h1 className="text-5xl md:text-6xl font-bold text-primary mb-4 font-heading">
            –í–æ–ª—à–µ–±–Ω—ã–π –∫—Ä–æ—Å—Å–≤–æ—Ä–¥ 
          </h1>
          <p className="text-xl text-purple-700 font-semibold">
            –°–∫–∞–∑–∫–∞ –æ –º—ë—Ä—Ç–≤–æ–π —Ü–∞—Ä–µ–≤–Ω–µ –∏ —Å–µ–º–∏ –±–æ–≥–∞—Ç—ã—Ä—è—Ö
          </p>
          <div className="mt-4 flex items-center justify-center gap-2">
            <Icon name="BookOpen" className="text-secondary" size={24} />
            <span className="text-lg text-purple-600">
              –û—Ç–≥–∞–¥–∞–Ω–æ: {completedClues.size} –∏–∑ {clues.length}
            </span>
          </div>
        </div>

        {showCongrats && (
          <Card className="mb-8 p-8 bg-gradient-to-r from-purple-500 to-pink-500 text-white animate-bounce-in">
            <div className="text-center">
              <div className="text-6xl mb-4">üéäüèÜüéä</div>
              <h2 className="text-4xl font-heading font-bold mb-2">–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</h2>
              <p className="text-xl">–¢—ã —Ä–∞–∑–≥–∞–¥–∞–ª –≤–µ—Å—å –∫—Ä–æ—Å—Å–≤–æ—Ä–¥! –ú–æ–ª–æ–¥–µ—Ü!</p>
            </div>
          </Card>
        )}

        <div className="grid md:grid-cols-2 gap-6">
          <div>
            <Card className="p-6 bg-white/90 backdrop-blur shadow-xl">
              <h2 className="text-2xl font-heading font-bold text-primary mb-4 flex items-center gap-2">
                <Icon name="HelpCircle" size={28} className="text-secondary" />
                –í–æ–ø—Ä–æ—Å—ã
              </h2>
              <div className="space-y-4">
                {clues.map((clue) => (
                  <div
                    key={clue.id}
                    className={`p-4 rounded-lg border-2 transition-all ${
                      completedClues.has(clue.id)
                        ? 'bg-green-100 border-green-400'
                        : 'bg-purple-50 border-purple-200 hover:border-purple-400'
                    }`}
                  >
                    <div className="flex items-start gap-3">
                      <div className="flex-shrink-0 w-8 h-8 rounded-full bg-primary text-white flex items-center justify-center font-bold">
                        {clue.number}
                      </div>
                      <div className="flex-1">
                        <p className="text-gray-800 mb-2 font-semibold">{clue.question}</p>
                        <div className="flex gap-2">
                          <Input
                            type="text"
                            placeholder="–¢–≤–æ–π –æ—Ç–≤–µ—Ç..."
                            value={userAnswers[clue.id] || ''}
                            onChange={(e) => handleInputChange(clue.id, e.target.value)}
                            disabled={completedClues.has(clue.id)}
                            className="flex-1"
                            onKeyDown={(e) => {
                              if (e.key === 'Enter') {
                                checkAnswer(clue.id);
                              }
                            }}
                          />
                          <Button
                            onClick={() => checkAnswer(clue.id)}
                            disabled={completedClues.has(clue.id)}
                            className="bg-secondary hover:bg-secondary/90"
                          >
                            {completedClues.has(clue.id) ? (
                              <Icon name="Check" size={20} />
                            ) : (
                              <Icon name="Send" size={20} />
                            )}
                          </Button>
                        </div>
                        {completedClues.has(clue.id) && (
                          <p className="text-green-600 font-bold mt-2 flex items-center gap-1">
                            <Icon name="CheckCircle" size={16} />
                            –û—Ç–≤–µ—Ç: {clue.answer}
                          </p>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </Card>
          </div>

          <div>
            <Card className="p-6 bg-white/90 backdrop-blur shadow-xl sticky top-8">
              <h2 className="text-2xl font-heading font-bold text-primary mb-4 flex items-center gap-2">
                <Icon name="Grid3x3" size={28} className="text-accent" />
                –ü–æ–¥—Å–∫–∞–∑–∫–∏
              </h2>
              <div className="space-y-3 text-gray-700">
                <div className="p-3 bg-purple-50 rounded-lg border border-purple-200">
                  <p className="font-semibold text-purple-700 mb-1">üí° –°–æ–≤–µ—Ç:</p>
                  <p>–í—Å–ø–æ–º–Ω–∏ –≥–ª–∞–≤–Ω—ã—Ö –≥–µ—Ä–æ–µ–≤ —Å–∫–∞–∑–∫–∏ –∏ –∏—Ö –ø–æ—Å—Ç—É–ø–∫–∏!</p>
                </div>
                <div className="p-3 bg-pink-50 rounded-lg border border-pink-200">
                  <p className="font-semibold text-pink-700 mb-1">üìñ –ü–æ–¥—Å–∫–∞–∑–∫–∞:</p>
                  <p>–¶–∞—Ä–µ–≤–Ω–∞ –±—ã–ª–∞ –æ—Ç—Ä–∞–≤–ª–µ–Ω–∞ —è–±–ª–æ–∫–æ–º, –∞ —Å–ø–∞—Å –µ—ë –∫–æ—Ä–æ–ª–µ–≤–∏—á –ï–ª–∏—Å–µ–π</p>
                </div>
                <div className="p-3 bg-orange-50 rounded-lg border border-orange-200">
                  <p className="font-semibold text-orange-700 mb-1">üéØ –ü–æ–º–Ω–∏:</p>
                  <p>–í—Å–µ –æ—Ç–≤–µ—Ç—ã –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å –ó–ê–ì–õ–ê–í–ù–´–ú–ò –±—É–∫–≤–∞–º–∏</p>
                </div>
                <div className="p-3 bg-purple-50 rounded-lg border border-purple-200">
                  <p className="font-semibold text-purple-700 mb-1">üåü –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ:</p>
                  <p>–≠—Ç—É —Å–∫–∞–∑–∫—É –Ω–∞–ø–∏—Å–∞–ª –≤–µ–ª–∏–∫–∏–π –ø–æ—ç—Ç –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –°–µ—Ä–≥–µ–µ–≤–∏—á –ü—É—à–∫–∏–Ω –≤ 1833 –≥–æ–¥—É</p>
                </div>
              </div>

              <div className="mt-6 p-4 bg-gradient-to-r from-purple-500 to-pink-500 rounded-lg text-white">
                <p className="text-center font-bold flex items-center justify-center gap-2">
                  <Icon name="Star" size={20} className="animate-sparkle" />
                  <span>–£–¥–∞—á–∏, —é–Ω—ã–π —Å–∫–∞–∑–æ—á–Ω–∏–∫!</span>
                  <Icon name="Star" size={20} className="animate-sparkle" style={{ animationDelay: '0.5s' }} />
                </p>
              </div>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Index;
